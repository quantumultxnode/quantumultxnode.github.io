<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://quantumultxnode.github.io/news/article-96837.htm" />
    <!-- Basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Metas -->
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>深入理解Spring的@Order注解和Ordered接口</title>
        <meta name="description" content="前言   Spring的@Order注解或者Ordered接口大家都知道是控制顺序的，那么它们到底是控制什么顺序的？是控制Bean的注入顺序，还是Bean的实例化顺序，还是Bean的执行顺序呢？那么我" />
        <link rel="icon" href="/assets/website/img/quantumultxnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="QuantumultX Node(圈X)官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://quantumultxnode.github.io/news/article-96837.htm" />
    <meta property="og:site_name" content="QuantumultX Node(圈X)官方节点站" />
    <meta property="og:title" content="深入理解Spring的@Order注解和Ordered接口" />
    <meta property="og:image" content="https://quantumultxnode.github.io/uploads/20240726-1/4c0a58f158d2a81b10180d8e0b874890.webp" />
        <meta property="og:release_date" content="2025-04-16T08:36:32" />
    <meta property="og:updated_time" content="2025-04-16T08:36:32" />
        <meta property="og:description" content="前言   Spring的@Order注解或者Ordered接口大家都知道是控制顺序的，那么它们到底是控制什么顺序的？是控制Bean的注入顺序，还是Bean的实例化顺序，还是Bean的执行顺序呢？那么我" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="深入理解Spring的@Order注解和Ordered接口">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxnode/bootstrap.min.css">
    <!-- Site CSS -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxnode/style.css">
    <!-- Colors CSS -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxnode/colors.css">
    <!-- ALL VERSION CSS -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxnode/versions.css">
    <!-- Responsive CSS -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxnode/responsive.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxnode/custom.css">
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-HT2LRJJHKV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-HT2LRJJHKV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="seo_version" data-page="detail">
    <!-- LOADER -->
    <div id="preloader">
        <div id="cupcake" class="box">
            <span class="letter">L</span>
            <div class="cupcakeCircle box">
                <div class="cupcakeInner box">
                    <div class="cupcakeCore box"></div>
                </div>
            </div>
            <span class="letter box">A</span>
            <span class="letter box">D</span>
            <span class="letter box">I</span>
            <span class="letter box">N</span>
            <span class="letter box">G</span>
        </div>
    </div>
    <!-- END LOADER -->
    <header class="header header_style_01">
        <nav class="megamenu navbar navbar-default">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="/">
                                        <span>QuantumultX Node</span>
                                        </a>
                </div>
                <div id="navbar" class="navbar-collapse collapse">
                    <ul class="nav navbar-nav navbar-right menu-top">
                                                <li><a href="/">首页</a></li>
                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                <li><a href="/client.htm">客户端</a></li>
                                                <li><a href="/news/">新闻资讯</a></li>
                                            </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="all-page-title" style="background-image:url(images/pattern-4.png);">
        <div class="container text-center">
            <h1>深入理解Spring的@Order注解和Ordered接口</h1>
        </div>
        <!--Page -->
        <div class="page-info">
            <div class="container">
                <div class="inner-container">
                    <ul class="bread-crumb">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li><span>正文</span></li>
                    </ul>
                </div>
            </div>
        </div>
        <!--End Page-->
    </div><!-- end section -->
    <svg id="clouds" class="hidden-xs" xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100" viewBox="0 0 85 100" preserveAspectRatio="none">
        <path d="M-5 100 Q 0 20 5 100 Z
            M0 100 Q 5 0 10 100
            M5 100 Q 10 30 15 100
            M10 100 Q 15 10 20 100
            M15 100 Q 20 30 25 100
            M20 100 Q 25 -10 30 100
            M25 100 Q 30 10 35 100
            M30 100 Q 35 30 40 100
            M35 100 Q 40 10 45 100
            M40 100 Q 45 50 50 100
            M45 100 Q 50 20 55 100
            M50 100 Q 55 40 60 100
            M55 100 Q 60 60 65 100
            M60 100 Q 65 50 70 100
            M65 100 Q 70 20 75 100
            M70 100 Q 75 45 80 100
            M75 100 Q 80 30 85 100
            M80 100 Q 85 20 90 100
            M85 100 Q 90 50 95 100
            M90 100 Q 95 25 100 100
            M95 100 Q 100 15 105 100 Z">
        </path>
    </svg>
    <div id="about" class="section wb nopadtop">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2><a id="_0" rel="nofollow"></a>前言</h2> <p>  Spring的@Order注解或者Ordered接口大家都知道是控制顺序的，那么它们到底是控制什么顺序的？是控制Bean的注入顺序，还是Bean的实例化顺序，还是Bean的执行顺序呢？那么我们先直接给出结论再来验证结论。<br /><strong>结论：Spring的@Order注解或者Ordered接口，不决定Bean的加载顺序和实例化顺序，只决定Bean的执行顺序。</strong></p> <h2><a id="OrderBean_3" rel="nofollow"></a>实例论证：@Order不决定Bean的加载和实例化顺序</h2> <p>步骤一：创建DemoService接口和三个实现类，分别打上注解@Order(0)-DemoServiceImpl01、@Order(1)-DemoServiceImpl02、@Order(2)-DemoServiceImpl03，观察实例化顺序。</p> <pre><code>@Service @Order(0) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }  }  @Service @Order(2) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }  }  // 运行结果如下 DemoServiceImpl01被实例化了 DemoServiceImpl02被实例化了 DemoServiceImpl03被实例化了</code></pre> <p>步骤二：改变DemoService接口三个实现类的注解序值，@Order(2)-DemoServiceImpl01、@Order(1)-DemoServiceImpl02、@Order(0)-DemoServiceImpl03，观察实例化顺序</p> <pre><code>@Service @Order(2) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }  }  @Service @Order(0) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }  }  // 运行结果如下 DemoServiceImpl01被实例化了 DemoServiceImpl02被实例化了 DemoServiceImpl03被实例化了</code></pre> <p>结果：当改变DemoService接口的三个实现类注解序值时，类的加载和实例化顺序根本没有变化，即@Order注解不决定Bean的加载和实例化顺序。</p> <h2><a id="OrderBean_78" rel="nofollow"></a>实例论证：@Order决定Bean的执行顺序</h2> <p>步骤一：创建RunServiceImpl类，并通过构造函数依赖注入DemoService的三个实现类，且循序依次执行三个实现类方法，观察Bean的执行顺序。</p> <pre><code>@Service public class RunServiceImpl implements RunService {      public RunServiceImpl(List&lt;DemoService&gt; demoServices) {         demoServices.forEach(demoService -&gt; demoService.say());     }  }  @Service @Order(0) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl01被执行了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl02被执行了");     }  }  @Service @Order(2) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl03被执行了");     }  }  // 运行结果如下 DemoServiceImpl01被执行了 DemoServiceImpl02被执行了 DemoServiceImpl03被执行了</code></pre> <p>步骤二：改变DemoService接口三个实现类的注解序值，@Order(2)-DemoServiceImpl01、@Order(1)-DemoServiceImpl02、@Order(0)-DemoServiceImpl03，观察Bean的执行顺序。</p> <pre><code>@Service public class RunServiceImpl implements RunService {      public RunServiceImpl(List&lt;DemoService&gt; demoServices) {         demoServices.forEach(demoService -&gt; demoService.say());     }  }  @Service @Order(2) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl01被执行了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl02被执行了");     }  }  @Service @Order(0) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl03被执行了");     }  }  // 运行结果如下 DemoServiceImpl03被执行了 DemoServiceImpl02被执行了 DemoServiceImpl01被执行了</code></pre> <p>结果：当改变DemoService接口的三个实现类注解序值时，类的执行顺序也随之发生变化，即@Order决定Bean的执行顺序。</p> <h2><a id="OrderOrderedBean_200" rel="nofollow"></a>@Order注解或Ordered接口决定Bean的执行顺序原理分析</h2> <p>通过上面实例论证，大家应该清楚@Order注解或Ordered接口只是决定了Bean的执行顺序，那么Spring是如何在依赖注入时完成根据@Order注解或Ordered接口控制Bean执行顺序？<br /><strong>原理分析：<br /> 当通过构造函数或者方法参数注入进某个List&lt;组件实现类&gt;时，Spring的DefaultListableBeanFactory类会在注入时调用AnnotationAwareOrderComparator.sort(listA)帮我们去完成根据@Order或者Ordered接口序值排序。</strong><br /> 备注：<br /> AnnotationAwareOrderComparator是OrderComparator的子类，而OrderComparator实现比较器Comparator接口，AnnotationAwareOrderComparator.sort(listA)会调用父类sort方法，会根据@Order或者Ordered接口设置的int序值重写sort方法进行排序，值越小优先级越高。</p> <h2></h2> <ol></ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-96092.htm">宠物食品店名称 宠物食品店名称大全</a></p>
                                        <p>下一个：<a href="/news/article-96838.htm">Git基础版本控制系统介绍</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-75297.htm" title="国产哪种狗粮质量信得过（国产什么牌子的狗粮好）">国产哪种狗粮质量信得过（国产什么牌子的狗粮好）</a></li>
                        <li class="py-2"><a href="/news/article-71301.htm" title="广州宠物领养中心具体地址电话号码（广州市宠物领养中心）">广州宠物领养中心具体地址电话号码（广州市宠物领养中心）</a></li>
                        <li class="py-2"><a href="/news/article-93820.htm" title="猫咪驱虫一般多少钱一支（猫咪驱虫大概多少钱一次）">猫咪驱虫一般多少钱一支（猫咪驱虫大概多少钱一次）</a></li>
                        <li class="py-2"><a href="/news/article-90106.htm" title="宠物医院申请条件及流程（宠物医院申办流程）">宠物医院申请条件及流程（宠物医院申办流程）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-16-free-subscribe-node.htm" title="3月16日 - 最高速度20.7M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐">3月16日 - 最高速度20.7M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-4-free-node-subscribe-links.htm" title="4月4日 - 最高速度19.2M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐">4月4日 - 最高速度19.2M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-82174.htm" title="Java中equals和==的区别，equals和hashcode的区别">Java中equals和==的区别，equals和hashcode的区别</a></li>
                        <li class="py-2"><a href="/news/article-96838.htm" title="Git基础版本控制系统介绍">Git基础版本控制系统介绍</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-23-latest-quantumult-x-node.htm" title="3月23日 - 最高速度21.3M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐">3月23日 - 最高速度21.3M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-30-free-high-speed-nodes.htm" title="3月30日 - 最高速度20.9M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐">3月30日 - 最高速度20.9M/S，2025年QuantumultX(圈X)免费节点订阅链接，干净IP机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">47</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div><!-- end container -->
    </div><!-- end section -->
    	    <div class="copyrights">
        <div class="container">
            <div class="footer-distributed">
                <div class="footer-left">
                    <p class="footer-company-name">
                                            <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <a href="/">QuantumultX Node(圈X)官方节点站</a> 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
        </div><!-- end container -->
    </div><!-- end copyrights -->
    <a href="#" id="scroll-to-top" class="dmtop global-radius"><i class="fa fa-angle-up"></i></a>
    <!-- ALL JS FILES -->
    <script src="/assets/website/js/frontend/quantumultxnode/all.js"></script>
    <!-- ALL PLUGINS -->
    <script src="/assets/website/js/frontend/quantumultxnode/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>